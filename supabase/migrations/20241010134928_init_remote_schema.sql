SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = "UTF8";
SET standard_conforming_strings = "on";
SELECT "pg_catalog"."set_config"('search_path', '', false);  -- noqa: CV10
SET check_function_bodies = false;
SET xmloption = "content";
SET client_min_messages = "warning";
SET row_security = "off";

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema'; -- noqa: CV10

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

SET default_tablespace = ''; -- noqa: CV10

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."accounts" (
    "id" "uuid" NOT NULL,
    "updated_at" timestamp with time zone,
    "email" "text",
    "name" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."accounts" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."occurrences" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone,
    "day" "date" NOT NULL,
    "user_id" "uuid" NOT NULL,
    "habit_id" bigint NOT NULL,
    "timestamp" bigint,
    "time" time with time zone
);

ALTER TABLE "public"."occurrences" OWNER TO "postgres";

ALTER TABLE "public"."occurrences" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."calendar_events_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."habits" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone,
    "user_id" "uuid",
    "name" "text" NOT NULL,
    "description" "text",
    "trait_id" bigint NOT NULL,
    "icon_path" "text"
);

ALTER TABLE "public"."habits" OWNER TO "postgres";

ALTER TABLE "public"."habits" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."habits_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."notes" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone,
    "day" "date",
    "occurrence_id" bigint,
    "user_id" "uuid" NOT NULL
);

ALTER TABLE "public"."notes" OWNER TO "postgres";

ALTER TABLE "public"."notes" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."notes_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."traits" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone,
    "name" "text" NOT NULL,
    "description" "text",
    "slug" "text" NOT NULL,
    "user_id" "uuid",
    "color" "text"
);

ALTER TABLE "public"."traits" OWNER TO "postgres";

ALTER TABLE "public"."traits" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."traits_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."accounts"
ADD CONSTRAINT "accounts_email_key" UNIQUE ("email");

ALTER TABLE ONLY "public"."accounts"
ADD CONSTRAINT "accounts_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."occurrences"
ADD CONSTRAINT "calendar_events_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."habits"
ADD CONSTRAINT "habits_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."notes"
ADD CONSTRAINT "notes_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."traits"
ADD CONSTRAINT "traits_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."accounts"
ADD CONSTRAINT "accounts_id_fkey" FOREIGN KEY (
    "id"
) REFERENCES "auth"."users" ("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."habits"
ADD CONSTRAINT "habits_user_id_fkey" FOREIGN KEY (
    "user_id"
) REFERENCES "public"."accounts" ("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."notes"
ADD CONSTRAINT "notes_occurrence_id_fkey" FOREIGN KEY (
    "occurrence_id"
) REFERENCES "public"."occurrences" ("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."notes"
ADD CONSTRAINT "notes_user_id_fkey" FOREIGN KEY (
    "user_id"
) REFERENCES "public"."accounts" ("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."habits"
ADD CONSTRAINT "public_habits_trait_id_fkey" FOREIGN KEY (
    "trait_id"
) REFERENCES "public"."traits" ("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."occurrences"
ADD CONSTRAINT "public_occurrences_habit_id_fkey" FOREIGN KEY (
    "habit_id"
) REFERENCES "public"."habits" ("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."occurrences"
ADD CONSTRAINT "public_occurrences_user_id_fkey" FOREIGN KEY (
    "user_id"
) REFERENCES "auth"."users" ("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."traits"
ADD CONSTRAINT "public_traits_user_id_fkey" FOREIGN KEY (
    "user_id"
) REFERENCES "public"."accounts" ("id") ON UPDATE CASCADE ON DELETE CASCADE;

CREATE POLICY "Enable delete for users based on id" ON "public"."accounts" FOR DELETE USING (
    ("auth"."uid"() = "id")
);

CREATE POLICY "Enable delete for users based on user_id" ON "public"."habits" FOR DELETE USING (
    ("auth"."uid"() = "user_id")
);

CREATE POLICY "Enable delete for users based on user_id" ON "public"."notes" FOR DELETE USING (
    ("auth"."uid"() = "user_id")
);

CREATE POLICY "Enable delete for users based on user_id" ON "public"."occurrences" FOR DELETE USING (
    ("auth"."uid"() = "user_id")
);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."habits" FOR INSERT
TO "authenticated" WITH CHECK (
    true
);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."notes" FOR INSERT
TO "authenticated" WITH CHECK (
    true
);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."occurrences" FOR INSERT
TO "authenticated" WITH CHECK (
    true
);

CREATE POLICY "Enable insert for users based on user_id" ON "public"."notes" FOR INSERT WITH CHECK (
    true
);

CREATE POLICY "Enable insert for users based on user_id" ON "public"."traits" FOR INSERT WITH CHECK (
    ((SELECT "auth"."uid"() AS "uid") = "user_id")
);

CREATE POLICY "Enable read access for all users" ON "public"."accounts" FOR SELECT USING (
    true
);

CREATE POLICY "Enable read access for all users" ON "public"."traits" FOR SELECT USING (
    true
);

CREATE POLICY "Enable read access for users based on user_id" ON "public"."habits" FOR SELECT USING (
    ("auth"."uid"() = "user_id")
);

CREATE POLICY "Enable read access for users based on user_id" ON "public"."notes" FOR SELECT USING (
    ("auth"."uid"() = "user_id")
);

CREATE POLICY "Enable read access for users based on user_id" ON "public"."occurrences" FOR SELECT USING (
    ("auth"."uid"() = "user_id")
);

CREATE POLICY "Enable update for users based on user_id" ON "public"."habits" FOR UPDATE USING (
    ("auth"."uid"() = "user_id")
) WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable update for users based on user_id" ON "public"."occurrences" FOR UPDATE USING (
    ("auth"."uid"() = "user_id")
) WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can insert own account" ON "public"."accounts" FOR INSERT WITH CHECK (
    ("auth"."uid"() = "id")
);

CREATE POLICY "Users can update own account" ON "public"."accounts" FOR UPDATE USING (
    ("auth"."uid"() = "id")
);

ALTER TABLE "public"."accounts" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."habits" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."notes" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."occurrences" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."traits" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."accounts" TO "anon";
GRANT ALL ON TABLE "public"."accounts" TO "authenticated";
GRANT ALL ON TABLE "public"."accounts" TO "service_role";

GRANT ALL ON TABLE "public"."occurrences" TO "anon";
GRANT ALL ON TABLE "public"."occurrences" TO "authenticated";
GRANT ALL ON TABLE "public"."occurrences" TO "service_role";

GRANT ALL ON SEQUENCE "public"."calendar_events_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."calendar_events_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."calendar_events_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."habits" TO "anon";
GRANT ALL ON TABLE "public"."habits" TO "authenticated";
GRANT ALL ON TABLE "public"."habits" TO "service_role";

GRANT ALL ON SEQUENCE "public"."habits_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."habits_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."habits_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."notes" TO "anon";
GRANT ALL ON TABLE "public"."notes" TO "authenticated";
GRANT ALL ON TABLE "public"."notes" TO "service_role";

GRANT ALL ON SEQUENCE "public"."notes_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."notes_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."notes_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."traits" TO "anon";
GRANT ALL ON TABLE "public"."traits" TO "authenticated";
GRANT ALL ON TABLE "public"."traits" TO "service_role";

GRANT ALL ON SEQUENCE "public"."traits_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."traits_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."traits_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";

RESET ALL;
